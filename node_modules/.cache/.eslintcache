[{"/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/index.tsx":"1","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/reportWebVitals.ts":"2","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/App.tsx":"3","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/components/Header.tsx":"4","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/components/Main.tsx":"5","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/components/BalanceMsg.tsx":"6","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/components/LotteryState.tsx":"7","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useLotteryState.ts":"8","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/index.ts":"9","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useLotteryBalance.ts":"10","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useLotteryTimeStamp.ts":"11","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useLotteryCounter.ts":"12","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/components/EnterLottery.tsx":"13","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useEntranceFee.ts":"14","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useEnterLottery.ts":"15","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useRecentWinner.ts":"16","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useEntranceFeeUSD.ts":"17","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useLotteryDuration.ts":"18","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useLotteryStateAdvanced.ts":"19","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/usePlayers.ts":"20","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/usePlayersCount.ts":"21"},{"size":500,"mtime":1638475062422,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":1638475062422,"results":"24","hashOfConfig":"23"},{"size":540,"mtime":1638476605574,"results":"25","hashOfConfig":"23"},{"size":1222,"mtime":1638909669709,"results":"26","hashOfConfig":"23"},{"size":1557,"mtime":1638908789539,"results":"27","hashOfConfig":"23"},{"size":806,"mtime":1637249583456,"results":"28","hashOfConfig":"23"},{"size":4738,"mtime":1639084452901,"results":"29","hashOfConfig":"23"},{"size":1148,"mtime":1638981208304,"results":"30","hashOfConfig":"23"},{"size":585,"mtime":1638995819249,"results":"31","hashOfConfig":"23"},{"size":928,"mtime":1638890494881,"results":"32","hashOfConfig":"23"},{"size":850,"mtime":1638993282313,"results":"33","hashOfConfig":"23"},{"size":804,"mtime":1638886154568,"results":"34","hashOfConfig":"23"},{"size":1297,"mtime":1638912292392,"results":"35","hashOfConfig":"23"},{"size":839,"mtime":1638910407687,"results":"36","hashOfConfig":"23"},{"size":1005,"mtime":1638900046702,"results":"37","hashOfConfig":"23"},{"size":829,"mtime":1638908397249,"results":"38","hashOfConfig":"23"},{"size":930,"mtime":1638910401543,"results":"39","hashOfConfig":"23"},{"size":885,"mtime":1638993431966,"results":"40","hashOfConfig":"23"},{"size":2071,"mtime":1638988808353,"results":"41","hashOfConfig":"23"},{"size":1338,"mtime":1639082706848,"results":"42","hashOfConfig":"23"},{"size":831,"mtime":1638995762305,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1luneny",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"46"},"/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/index.tsx",[],["99","100"],"/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/reportWebVitals.ts",[],"/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/App.tsx",[],"/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/components/Header.tsx",[],"/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/components/Main.tsx",["101","102","103","104","105"],"/* eslint-disable spaced-comment */\n/// <reference types=\"react-scripts\" />\nimport { useEthers } from \"@usedapp/core\"\nimport helperConfig from \"../helper-config.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { constants } from \"ethers\"\nimport brownieConfig from \"../brownie-config.json\"\nimport dapp from \"../dapp.png\"\nimport eth from \"../eth.png\"\nimport dai from \"../dai.png\"\nimport { makeStyles } from \"@material-ui/core\"\nimport { LotteryState } from \"./LotteryState\"\nimport { EnterLottery } from \"./EnterLottery\"\n\nexport type Token = {\n    image: string\n    address: string\n    name: string\n}\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        color: theme.palette.common.white,\n        textAlign: \"center\",\n        padding: theme.spacing(4)\n    },\n    subtitle: {\n        color: theme.palette.common.white,\n        textAlign: \"center\",\n        padding: theme.spacing(1)\n    },\n    text: {\n        color: theme.palette.common.white,\n        textAlign: \"center\",\n    }\n}))\n\nexport const Main = () => {\n    const classes = useStyles()\n    const { chainId, error } = useEthers()\n    const networkName = chainId ? helperConfig[chainId] : \"dev\"\n    const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero\n\n    return (<>\n        <h2 className={classes.title}>Artem SmartContract Lottery {networkName}</h2>\n        <div className={classes.text}>Lottery contract address: {artemLotteryAddress}</div>\n        <LotteryState />\n        <EnterLottery />\n    </>)\n}\n","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/components/BalanceMsg.tsx",[],"/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/components/LotteryState.tsx",["106","107","108","109"],"/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useLotteryState.ts",["110","111","112"],"import { useEthers, useContractFunction, useContractCall } from \"@usedapp/core\"\nimport { constants, utils, BigNumber } from \"ethers\"\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nenum LOTTERY_STATE {\n    OPEN,\n    CLOSED,\n    CALCULATING_WINNER\n}\n\nexport const useLotteryState = (): string => {\n    const { chainId } = useEthers()\n    const { abi } = ArtemLottery\n    const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero\n    const artemLotteryInterface = new utils.Interface(abi)\n\n    const [lottery_state]: any = useContractCall({\n        abi: artemLotteryInterface,\n        address: artemLotteryAddress,\n        method: \"lottery_state\",\n        args: [],\n    }) ?? [];\n\n\n    switch (lottery_state) {\n        case LOTTERY_STATE.OPEN:\n            return \"open\";\n        case LOTTERY_STATE.CLOSED:\n            return \"closed\";\n        case LOTTERY_STATE.CALCULATING_WINNER:\n            return \"calculating winner\"\n        default:\n            return \"not working!\"\n    }\n\n\n\n    return lottery_state;\n}","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/index.ts",[],"/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useLotteryBalance.ts",["113","114"],"import { useEthers, useContractFunction, useContractCall } from \"@usedapp/core\"\nimport { constants, utils, BigNumber } from \"ethers\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const useLotteryBalance = (): number => {\n    const { chainId } = useEthers()\n    const { abi } = ArtemLottery\n    const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero;\n    const artemLotteryInterface = new utils.Interface(abi)\n    const [balance]: any = useContractCall({\n        abi: artemLotteryInterface,\n        address: artemLotteryAddress,\n        method: \"getBalance\",\n        args: [],\n    }) ?? []\n\n\n    const formattedBalance = balance\n        ? parseFloat(formatUnits(balance._hex, 18))\n        : -1\n\n    return formattedBalance\n}\n","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useLotteryTimeStamp.ts",["115","116"],"import { useEthers, useContractFunction, useContractCall } from \"@usedapp/core\"\nimport { constants, utils, BigNumber } from \"ethers\"\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const useLotteryTimeStamp = (): number => {\n    const { chainId } = useEthers()\n    const { abi } = ArtemLottery\n    const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero\n    const artemLotteryInterface = new utils.Interface(abi)\n    const [lastTimeStamp]: any = useContractCall({\n        abi: artemLotteryInterface,\n        address: artemLotteryAddress,\n        method: \"lastTimeStamp\",\n        args: [],\n    }) ?? [];\n    \n    const timestamp = lastTimeStamp ? lastTimeStamp.toNumber() : 0\n    return timestamp;\n}\n\n","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useLotteryCounter.ts",["117","118"],"import { useEthers, useContractFunction, useContractCall } from \"@usedapp/core\"\nimport { ethers, constants, utils, BigNumber } from \"ethers\"\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const useLotteryCounter = (): BigNumber | undefined => {\n    const { chainId } = useEthers()\n    const { abi } = ArtemLottery\n    const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero\n    const artemLotteryInterface = new utils.Interface(abi)\n    const [lotteryCounter]: any = useContractCall({\n        abi: artemLotteryInterface,\n        address: artemLotteryAddress,\n        method: \"lotteryCounter\",\n        args: [],\n    }) ?? []\n\n    return lotteryCounter;\n}","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/components/EnterLottery.tsx",["119","120","121","122"],"import React, { useEffect, useState } from \"react\"\nimport { makeStyles, Button, Input, CircularProgress, Snackbar } from \"@material-ui/core\"\nimport { useEnterLottery, useEntranceFee, useEntranceFeeUSD } from \"../hooks\"\nimport { formatUnits } from \"@ethersproject/units\"\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        justifyContent: 'center'\n    },\n    text: {\n        color: theme.palette.common.white,\n    }\n}))\n\n\n\nexport const EnterLottery = () => {\n    const classes = useStyles()\n    const { enterLotterySend, enterLotteryState } =\n        useEnterLottery()\n\n    const entranceFee = useEntranceFee()\n    const entranceFeeUsd = useEntranceFeeUSD()\n\n    const handleEnterLottery = () => {\n        return enterLotterySend({ value: entranceFee })\n    }\n    const isMining = enterLotteryState.status === \"Mining\"\n\n\n\n    return (\n        <>\n            <Button\n                color=\"primary\"\n                variant=\"contained\"\n                size=\"large\"\n                onClick={handleEnterLottery}\n                disabled={isMining}>\n                {isMining ? <CircularProgress size={26} /> : \"Enter lottery\"}\n            </Button>\n            <div className={classes.text}>{entranceFeeUsd}$ or {entranceFee ? formatUnits(entranceFee, 18) : -1}ETH</div>\n\n        </>)\n}\n\n","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useEntranceFee.ts",["123","124"],"import { useEthers, useContractFunction, useContractCall } from \"@usedapp/core\"\nimport { constants, utils, BigNumber } from \"ethers\"\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { formatUnits } from \"@ethersproject/units\"\n\n\nexport const useEntranceFee = (): BigNumber | undefined => {\n    const { chainId } = useEthers()\n    const { abi } = ArtemLottery\n    const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero\n    const artemLotteryInterface = new utils.Interface(abi)\n    const [entranceFee]: any = useContractCall({\n        abi: artemLotteryInterface,\n        address: artemLotteryAddress,\n        method: \"getEntranceFee\",\n        args: [],\n    }) ?? []\n\n    return entranceFee;\n}","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useEnterLottery.ts",["125","126","127"],"import { useEthers, useContractFunction, useContractCall } from \"@usedapp/core\"\nimport { constants, utils, BigNumber } from \"ethers\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const useEnterLottery = () => {\n    const { chainId } = useEthers()\n    const { abi } = ArtemLottery\n    const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero;\n    const artemLotteryInterface = new utils.Interface(abi)\n    const artemLotteryContract = new Contract(\n        artemLotteryAddress,\n        artemLotteryInterface\n    )\n    const { send: enterLotterySend, state: enterLotteryState } =\n        useContractFunction(artemLotteryContract, \"enter\", {\n            transactionName: \"Enter lottery\",\n        })\n\n    return { enterLotterySend, enterLotteryState }\n\n\n}","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useRecentWinner.ts",["128","129"],"import { useEthers, useContractFunction, useContractCall } from \"@usedapp/core\"\nimport { constants, utils, BigNumber } from \"ethers\"\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const useRecentWinner = (): String => {\n    const { chainId } = useEthers()\n    const { abi } = ArtemLottery\n    const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero\n    const artemLotteryInterface = new utils.Interface(abi)\n    const [recentWinner]: any = useContractCall({\n        abi: artemLotteryInterface,\n        address: artemLotteryAddress,\n        method: \"recentWinner\",\n        args: [],\n    }) ?? [];\n\n\n    const winner = recentWinner ? recentWinner : \"No data\"\n\n    return winner;\n}","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useEntranceFeeUSD.ts",["130","131"],"import { useEthers, useContractFunction, useContractCall } from \"@usedapp/core\"\nimport { constants, utils, BigNumber } from \"ethers\"\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { formatUnits } from \"@ethersproject/units\"\n\n\nexport const useEntranceFeeUSD = (): number => {\n    const { chainId } = useEthers()\n    const { abi } = ArtemLottery\n    const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero\n    const artemLotteryInterface = new utils.Interface(abi)\n    const [entranceFeeUsd]: any = useContractCall({\n        abi: artemLotteryInterface,\n        address: artemLotteryAddress,\n        method: \"usdEntryFee\",\n        args: [],\n    }) ?? []\n\n    const formatted = entranceFeeUsd\n        ? parseFloat(formatUnits(entranceFeeUsd, 18))\n        : -1\n\n    return formatted;\n}","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useLotteryDuration.ts",["132","133"],"import { useEthers, useContractFunction, useContractCall } from \"@usedapp/core\"\nimport { constants, utils, BigNumber } from \"ethers\"\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const useLotteryDuration = (): number => {\n    const { chainId } = useEthers()\n    const { abi } = ArtemLottery\n    const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero\n    const artemLotteryInterface = new utils.Interface(abi)\n    const [lotteryDurationInSeconds]: any = useContractCall({\n        abi: artemLotteryInterface,\n        address: artemLotteryAddress,\n        method: \"lotteryDurationInSeconds\",\n        args: [],\n    }) ?? []\n\n    const duration = lotteryDurationInSeconds ? lotteryDurationInSeconds.toNumber() : 0\n\n    return duration;\n}","/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useLotteryStateAdvanced.ts",["134","135","136","137"],"/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/usePlayers.ts",["138","139","140","141"],"/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/usePlayersCount.ts",["142","143"],"import { useEthers, useContractFunction, useContractCall } from \"@usedapp/core\"\nimport { constants, utils, BigNumber } from \"ethers\"\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const usePlayersCount = (): number => {\n    const { chainId } = useEthers()\n    const { abi } = ArtemLottery\n    const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero\n    const artemLotteryInterface = new utils.Interface(abi)\n    const [playersCount]: any = useContractCall({\n        abi: artemLotteryInterface,\n        address: artemLotteryAddress,\n        method: \"getPlayersCount\",\n        args: [],\n    }) ?? []\n\n    const count = playersCount ? playersCount.toNumber() : 0\n\n    return count;\n}",{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":7,"column":8,"nodeType":"150","messageId":"151","endLine":7,"endColumn":21},{"ruleId":"148","severity":1,"message":"152","line":8,"column":8,"nodeType":"150","messageId":"151","endLine":8,"endColumn":12},{"ruleId":"148","severity":1,"message":"153","line":9,"column":8,"nodeType":"150","messageId":"151","endLine":9,"endColumn":11},{"ruleId":"148","severity":1,"message":"154","line":10,"column":8,"nodeType":"150","messageId":"151","endLine":10,"endColumn":11},{"ruleId":"148","severity":1,"message":"155","line":40,"column":22,"nodeType":"150","messageId":"151","endLine":40,"endColumn":27},{"ruleId":"148","severity":1,"message":"156","line":4,"column":10,"nodeType":"150","messageId":"151","endLine":4,"endColumn":19},{"ruleId":"157","severity":1,"message":"158","line":37,"column":22,"nodeType":"159","messageId":"160","endLine":37,"endColumn":24},{"ruleId":"157","severity":1,"message":"158","line":106,"column":17,"nodeType":"159","messageId":"160","endLine":106,"endColumn":19},{"ruleId":"161","severity":1,"message":"162","line":116,"column":12,"nodeType":"163","messageId":"164","endLine":116,"endColumn":38},{"ruleId":"148","severity":1,"message":"165","line":1,"column":21,"nodeType":"150","messageId":"151","endLine":1,"endColumn":40},{"ruleId":"148","severity":1,"message":"156","line":2,"column":28,"nodeType":"150","messageId":"151","endLine":2,"endColumn":37},{"ruleId":"166","severity":1,"message":"167","line":39,"column":5,"nodeType":"168","messageId":"169","endLine":39,"endColumn":26},{"ruleId":"148","severity":1,"message":"165","line":1,"column":21,"nodeType":"150","messageId":"151","endLine":1,"endColumn":40},{"ruleId":"148","severity":1,"message":"156","line":2,"column":28,"nodeType":"150","messageId":"151","endLine":2,"endColumn":37},{"ruleId":"148","severity":1,"message":"165","line":1,"column":21,"nodeType":"150","messageId":"151","endLine":1,"endColumn":40},{"ruleId":"148","severity":1,"message":"156","line":2,"column":28,"nodeType":"150","messageId":"151","endLine":2,"endColumn":37},{"ruleId":"148","severity":1,"message":"165","line":1,"column":21,"nodeType":"150","messageId":"151","endLine":1,"endColumn":40},{"ruleId":"148","severity":1,"message":"170","line":2,"column":10,"nodeType":"150","messageId":"151","endLine":2,"endColumn":16},{"ruleId":"148","severity":1,"message":"171","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":26},{"ruleId":"148","severity":1,"message":"172","line":1,"column":28,"nodeType":"150","messageId":"151","endLine":1,"endColumn":36},{"ruleId":"148","severity":1,"message":"173","line":2,"column":30,"nodeType":"150","messageId":"151","endLine":2,"endColumn":35},{"ruleId":"148","severity":1,"message":"174","line":2,"column":55,"nodeType":"150","messageId":"151","endLine":2,"endColumn":63},{"ruleId":"148","severity":1,"message":"165","line":1,"column":21,"nodeType":"150","messageId":"151","endLine":1,"endColumn":40},{"ruleId":"148","severity":1,"message":"175","line":5,"column":10,"nodeType":"150","messageId":"151","endLine":5,"endColumn":21},{"ruleId":"148","severity":1,"message":"176","line":1,"column":42,"nodeType":"150","messageId":"151","endLine":1,"endColumn":57},{"ruleId":"148","severity":1,"message":"156","line":2,"column":28,"nodeType":"150","messageId":"151","endLine":2,"endColumn":37},{"ruleId":"148","severity":1,"message":"175","line":3,"column":10,"nodeType":"150","messageId":"151","endLine":3,"endColumn":21},{"ruleId":"148","severity":1,"message":"165","line":1,"column":21,"nodeType":"150","messageId":"151","endLine":1,"endColumn":40},{"ruleId":"148","severity":1,"message":"156","line":2,"column":28,"nodeType":"150","messageId":"151","endLine":2,"endColumn":37},{"ruleId":"148","severity":1,"message":"165","line":1,"column":21,"nodeType":"150","messageId":"151","endLine":1,"endColumn":40},{"ruleId":"148","severity":1,"message":"156","line":2,"column":28,"nodeType":"150","messageId":"151","endLine":2,"endColumn":37},{"ruleId":"148","severity":1,"message":"165","line":1,"column":21,"nodeType":"150","messageId":"151","endLine":1,"endColumn":40},{"ruleId":"148","severity":1,"message":"156","line":2,"column":28,"nodeType":"150","messageId":"151","endLine":2,"endColumn":37},{"ruleId":"148","severity":1,"message":"165","line":1,"column":21,"nodeType":"150","messageId":"151","endLine":1,"endColumn":40},{"ruleId":"148","severity":1,"message":"156","line":2,"column":28,"nodeType":"150","messageId":"151","endLine":2,"endColumn":37},{"ruleId":"148","severity":1,"message":"177","line":5,"column":10,"nodeType":"150","messageId":"151","endLine":5,"endColumn":22},{"ruleId":"178","severity":1,"message":"179","line":62,"column":43,"nodeType":"159","messageId":"180","endLine":62,"endColumn":44},{"ruleId":"148","severity":1,"message":"165","line":1,"column":21,"nodeType":"150","messageId":"151","endLine":1,"endColumn":40},{"ruleId":"148","severity":1,"message":"176","line":1,"column":42,"nodeType":"150","messageId":"151","endLine":1,"endColumn":57},{"ruleId":"148","severity":1,"message":"156","line":2,"column":28,"nodeType":"150","messageId":"151","endLine":2,"endColumn":37},{"ruleId":"148","severity":1,"message":"175","line":5,"column":10,"nodeType":"150","messageId":"151","endLine":5,"endColumn":21},{"ruleId":"148","severity":1,"message":"165","line":1,"column":21,"nodeType":"150","messageId":"151","endLine":1,"endColumn":40},{"ruleId":"148","severity":1,"message":"156","line":2,"column":28,"nodeType":"150","messageId":"151","endLine":2,"endColumn":37},"no-native-reassign",["181"],"no-negated-in-lhs",["182"],"@typescript-eslint/no-unused-vars","'brownieConfig' is defined but never used.","Identifier","unusedVar","'dapp' is defined but never used.","'eth' is defined but never used.","'dai' is defined but never used.","'error' is assigned a value but never used.","'BigNumber' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'useContractFunction' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'ethers' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'Input' is defined but never used.","'Snackbar' is defined but never used.","'formatUnits' is defined but never used.","'useContractCall' is defined but never used.","'LotteryState' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-global-assign","no-unsafe-negation"]