{"ast":null,"code":"var _jsxFileName = \"/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/components/LotteryState.tsx\",\n    _s = $RefreshSig$();\n\nimport { useLotteryBalance, useLotteryTimeStamp, useLotteryStateAdvanced } from \"../hooks\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  title: {\n    color: theme.palette.common.white,\n    textAlign: \"center\",\n    padding: theme.spacing(4)\n  },\n  subtitle: {\n    color: theme.palette.common.white,\n    textAlign: \"center\",\n    padding: theme.spacing(1)\n  }\n}));\nexport const LotteryState = () => {\n  _s();\n\n  const classes = useStyles();\n  const lotteryStateAdvanced = useLotteryStateAdvanced();\n  const lotteryState = parseLotteryState(lotteryStateAdvanced[0]);\n  const balance = useLotteryBalance(); //parseLotteryBalance(lotteryStateAdvanced[1])\n  //const counter = parseLotteryCounter(lotteryStateAdvanced[2])\n\n  const timestamp = useLotteryTimeStamp(); //const recentWinner = parseRecentWinner(lotteryStateAdvanced[3])\n  //const lotteryDuration = parseLotteryDuration(lotteryStateAdvanced[4])\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: classes.subtitle,\n      children: [\" Lottery is \", lotteryState, \" now\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: classes.subtitle,\n      children: [\" Lottery balance is \", balance, \" ethers\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: classes.subtitle,\n      children: [\" last updated \", timestamp]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(LotteryState, \"AIzX9KLtE7rJDCOjiIs6GUHTC3E=\", false, function () {\n  return [useStyles, useLotteryStateAdvanced, useLotteryBalance, useLotteryTimeStamp];\n});\n\n_c = LotteryState;\nvar LOTTERY_STATE;\n\n(function (LOTTERY_STATE) {\n  LOTTERY_STATE[LOTTERY_STATE[\"OPEN\"] = 0] = \"OPEN\";\n  LOTTERY_STATE[LOTTERY_STATE[\"CLOSED\"] = 1] = \"CLOSED\";\n  LOTTERY_STATE[LOTTERY_STATE[\"CALCULATING_WINNER\"] = 2] = \"CALCULATING_WINNER\";\n})(LOTTERY_STATE || (LOTTERY_STATE = {}));\n\nexport const parseLotteryState = lottery_state => {\n  switch (lottery_state) {\n    case LOTTERY_STATE.OPEN:\n      return \"open\";\n\n    case LOTTERY_STATE.CLOSED:\n      return \"closed\";\n\n    case LOTTERY_STATE.CALCULATING_WINNER:\n      return \"calculating winner\";\n\n    default:\n      return \"not working!\";\n  }\n};\nexport const parseLotteryBalance = balance => {\n  return (balance === null || balance === void 0 ? void 0 : balance._hex) ? parseFloat(formatUnits(balance._hex, 18)) : -1;\n};\nexport const parseLotteryCounter = counter => {\n  return counter ? counter : -10;\n}; // export const parseLotteryTimeStamp = (timestamp: BigNumber): string => {\n//     const timstampForHumans = timestamp ? time_ago(new Date(timestamp.toNumber() * 1000).toString()) : \"No data\"\n//     return timstampForHumans;\n// }\n\nexport const parseLotteryDuration = durationInSeconds => {\n  return durationInSeconds ? durationInSeconds + \" seconds\" : \"no data\";\n};\nexport const parseRecentWinner = winner => {\n  return winner ? winner : \"no data\";\n};\n\nfunction time_ago(time) {\n  switch (typeof time) {\n    case 'number':\n      break;\n\n    case 'string':\n      time = +new Date(time);\n      break;\n\n    case 'object':\n      if (time.constructor === Date) time = time.getTime();\n      break;\n\n    default:\n      time = +new Date();\n  }\n\n  var time_formats = [[60, 'seconds', 1], // 60\n  [120, '1 minute ago', '1 minute from now'], // 60*2\n  [3600, 'minutes', 60], // 60*60, 60\n  [7200, '1 hour ago', '1 hour from now'], // 60*60*2\n  [86400, 'hours', 3600], // 60*60*24, 60*60\n  [172800, 'Yesterday', 'Tomorrow'], // 60*60*24*2\n  [604800, 'days', 86400], // 60*60*24*7, 60*60*24\n  [1209600, 'Last week', 'Next week'], // 60*60*24*7*4*2\n  [2419200, 'weeks', 604800], // 60*60*24*7*4, 60*60*24*7\n  [4838400, 'Last month', 'Next month'], // 60*60*24*7*4*2\n  [29030400, 'months', 2419200], // 60*60*24*7*4*12, 60*60*24*7*4\n  [58060800, 'Last year', 'Next year'], // 60*60*24*7*4*12*2\n  [2903040000, 'years', 29030400], // 60*60*24*7*4*12*100, 60*60*24*7*4*12\n  [5806080000, 'Last century', 'Next century'], // 60*60*24*7*4*12*100*2\n  [58060800000, 'centuries', 2903040000] // 60*60*24*7*4*12*100*20, 60*60*24*7*4*12*100\n  ];\n  var seconds = (+new Date() - time) / 1000,\n      token = 'ago',\n      list_choice = 1;\n\n  if (seconds == 0) {\n    return 'Just now';\n  }\n\n  if (seconds < 0) {\n    seconds = Math.abs(seconds);\n    token = 'from now';\n    list_choice = 2;\n  }\n\n  var i = 0,\n      format;\n\n  while (format = time_formats[i++]) if (seconds < format[0]) {\n    if (typeof format[2] == 'string') return format[list_choice];else return Math.floor(seconds / format[2]) + ' ' + format[1] + ' ' + token;\n  }\n\n  return time;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"LotteryState\");","map":{"version":3,"sources":["/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/components/LotteryState.tsx"],"names":["useLotteryBalance","useLotteryTimeStamp","useLotteryStateAdvanced","makeStyles","formatUnits","useStyles","theme","title","color","palette","common","white","textAlign","padding","spacing","subtitle","LotteryState","classes","lotteryStateAdvanced","lotteryState","parseLotteryState","balance","timestamp","LOTTERY_STATE","lottery_state","OPEN","CLOSED","CALCULATING_WINNER","parseLotteryBalance","_hex","parseFloat","parseLotteryCounter","counter","parseLotteryDuration","durationInSeconds","parseRecentWinner","winner","time_ago","time","Date","constructor","getTime","time_formats","seconds","token","list_choice","Math","abs","i","format","floor"],"mappings":"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","sourcesContent":["import { useLotteryState, useLotteryBalance, useLotteryTimeStamp, useLotteryCounter, useRecentWinner, useLotteryStateAdvanced } from \"../hooks\"\nimport { makeStyles } from \"@material-ui/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { BigNumber } from \"@ethersproject/bignumber\"\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        color: theme.palette.common.white,\n        textAlign: \"center\",\n        padding: theme.spacing(4)\n    },\n    subtitle: {\n        color: theme.palette.common.white,\n        textAlign: \"center\",\n        padding: theme.spacing(1)\n    },\n}))\n\nexport const LotteryState = () => {\n    const classes = useStyles()\n    const lotteryStateAdvanced = useLotteryStateAdvanced()\n\n    const lotteryState = parseLotteryState(lotteryStateAdvanced[0])\n    const balance = useLotteryBalance()//parseLotteryBalance(lotteryStateAdvanced[1])\n    //const counter = parseLotteryCounter(lotteryStateAdvanced[2])\n    const timestamp = useLotteryTimeStamp()\n    //const recentWinner = parseRecentWinner(lotteryStateAdvanced[3])\n    //const lotteryDuration = parseLotteryDuration(lotteryStateAdvanced[4])\n    return (\n        <>\n            <h2 className={classes.subtitle}> Lottery is {lotteryState} now</h2>\n            <h2 className={classes.subtitle}> Lottery balance is {balance} ethers</h2>\n            <h2 className={classes.subtitle}> last updated {timestamp}</h2>\n            {/* <h2 className={classes.subtitle}> Recent winner is {recentWinner}</h2>\n            <h2 className={classes.subtitle}> Lottery counter is {counter}</h2>\n            \n            <h2 className={classes.subtitle}> Lottery duration is {lotteryDuration}</h2> */}\n\n        </>)\n}\nenum LOTTERY_STATE {\n    OPEN,\n    CLOSED,\n    CALCULATING_WINNER\n}\n\nexport const parseLotteryState = (lottery_state: number): string => {\n    switch (lottery_state) {\n        case LOTTERY_STATE.OPEN:\n            return \"open\";\n        case LOTTERY_STATE.CLOSED:\n            return \"closed\";\n        case LOTTERY_STATE.CALCULATING_WINNER:\n            return \"calculating winner\"\n        default:\n            return \"not working!\"\n    }\n}\nexport const parseLotteryBalance = (balance: any): number => {\n    return balance?._hex\n        ? parseFloat(formatUnits(balance._hex, 18))\n        : -1\n}\nexport const parseLotteryCounter = (counter: any): number => {\n    return counter ? counter : -10\n}\n\n// export const parseLotteryTimeStamp = (timestamp: BigNumber): string => {\n\n//     const timstampForHumans = timestamp ? time_ago(new Date(timestamp.toNumber() * 1000).toString()) : \"No data\"\n\n//     return timstampForHumans;\n// }\n\n\n\nexport const parseLotteryDuration = (durationInSeconds: any): string => {\n    return durationInSeconds ? durationInSeconds + \" seconds\" : \"no data\"\n}\n\nexport const parseRecentWinner = (winner: any): string => {\n    return winner ? winner : \"no data\"\n}\n\n\n\nfunction time_ago(time: any) {\n\n    switch (typeof time) {\n        case 'number':\n            break;\n        case 'string':\n            time = +new Date(time);\n            break;\n        case 'object':\n            if (time.constructor === Date) time = time.getTime();\n            break;\n        default:\n            time = +new Date();\n    }\n    var time_formats = [\n        [60, 'seconds', 1], // 60\n        [120, '1 minute ago', '1 minute from now'], // 60*2\n        [3600, 'minutes', 60], // 60*60, 60\n        [7200, '1 hour ago', '1 hour from now'], // 60*60*2\n        [86400, 'hours', 3600], // 60*60*24, 60*60\n        [172800, 'Yesterday', 'Tomorrow'], // 60*60*24*2\n        [604800, 'days', 86400], // 60*60*24*7, 60*60*24\n        [1209600, 'Last week', 'Next week'], // 60*60*24*7*4*2\n        [2419200, 'weeks', 604800], // 60*60*24*7*4, 60*60*24*7\n        [4838400, 'Last month', 'Next month'], // 60*60*24*7*4*2\n        [29030400, 'months', 2419200], // 60*60*24*7*4*12, 60*60*24*7*4\n        [58060800, 'Last year', 'Next year'], // 60*60*24*7*4*12*2\n        [2903040000, 'years', 29030400], // 60*60*24*7*4*12*100, 60*60*24*7*4*12\n        [5806080000, 'Last century', 'Next century'], // 60*60*24*7*4*12*100*2\n        [58060800000, 'centuries', 2903040000] // 60*60*24*7*4*12*100*20, 60*60*24*7*4*12*100\n    ];\n    var seconds = (+new Date() - time) / 1000,\n        token = 'ago',\n        list_choice = 1;\n\n    if (seconds == 0) {\n        return 'Just now'\n    }\n    if (seconds < 0) {\n        seconds = Math.abs(seconds);\n        token = 'from now';\n        list_choice = 2;\n    }\n    var i = 0,\n        format;\n    while (format = time_formats[i++])\n        if (seconds < format[0]) {\n            if (typeof format[2] == 'string')\n                return format[list_choice];\n            else\n                return Math.floor(seconds / format[2]) + ' ' + format[1] + ' ' + token;\n        }\n    return time;\n}\n"]},"metadata":{},"sourceType":"module"}