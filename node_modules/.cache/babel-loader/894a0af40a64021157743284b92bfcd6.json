{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEthers, useContractCall } from \"@usedapp/core\";\nimport { constants, utils } from \"ethers\";\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\";\nimport networkMapping from \"../chain-info/deployments/map.json\";\nexport const useEntranceFeeUSD = () => {\n  _s();\n\n  var _useContractCall;\n\n  const {\n    chainId\n  } = useEthers();\n  const {\n    abi\n  } = ArtemLottery;\n  const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero;\n  const artemLotteryInterface = new utils.Interface(abi);\n  const [entranceFeeUsd] = (_useContractCall = useContractCall({\n    abi: artemLotteryInterface,\n    address: artemLotteryAddress,\n    method: \"usdEntryFee\",\n    args: []\n  })) !== null && _useContractCall !== void 0 ? _useContractCall : [];\n  const formatted = balance ? parseFloat(formatUnits(balance._hex, 18)) : -1;\n  return entranceFeeUsd;\n};\n\n_s(useEntranceFeeUSD, \"My0ConC8wq5+sD2i0i5tnHZ+TJ8=\", false, function () {\n  return [useEthers, useContractCall];\n});","map":{"version":3,"sources":["/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useEntranceFeeUSD.ts"],"names":["useEthers","useContractCall","constants","utils","ArtemLottery","networkMapping","useEntranceFeeUSD","chainId","abi","artemLotteryAddress","String","AddressZero","artemLotteryInterface","Interface","entranceFeeUsd","address","method","args","formatted","balance","parseFloat","formatUnits","_hex"],"mappings":";;AAAA,SAASA,SAAT,EAAyCC,eAAzC,QAAgE,eAAhE;AACA,SAASC,SAAT,EAAoBC,KAApB,QAA4C,QAA5C;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAc;AAAA;;AAAA;;AAC3C,QAAM;AAAEC,IAAAA;AAAF,MAAcP,SAAS,EAA7B;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAUJ,YAAhB;AACA,QAAMK,mBAAmB,GAAGF,OAAO,GAAGF,cAAc,CAACK,MAAM,CAACH,OAAD,CAAP,CAAd,CAAgC,cAAhC,EAAgD,CAAhD,CAAH,GAAwDL,SAAS,CAACS,WAArG;AACA,QAAMC,qBAAqB,GAAG,IAAIT,KAAK,CAACU,SAAV,CAAoBL,GAApB,CAA9B;AACA,QAAM,CAACM,cAAD,wBAAwBb,eAAe,CAAC;AAC1CO,IAAAA,GAAG,EAAEI,qBADqC;AAE1CG,IAAAA,OAAO,EAAEN,mBAFiC;AAG1CO,IAAAA,MAAM,EAAE,aAHkC;AAI1CC,IAAAA,IAAI,EAAE;AAJoC,GAAD,CAAvC,+DAKA,EALN;AAOA,QAAMC,SAAS,GAAGC,OAAO,GACnBC,UAAU,CAACC,WAAW,CAACF,OAAO,CAACG,IAAT,EAAe,EAAf,CAAZ,CADS,GAEnB,CAAC,CAFP;AAIA,SAAOR,cAAP;AACH,CAjBM;;GAAMR,iB;UACWN,S,EAIUC,e","sourcesContent":["import { useEthers, useContractFunction, useContractCall } from \"@usedapp/core\"\nimport { constants, utils, BigNumber } from \"ethers\"\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const useEntranceFeeUSD = (): number => {\n    const { chainId } = useEthers()\n    const { abi } = ArtemLottery\n    const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero\n    const artemLotteryInterface = new utils.Interface(abi)\n    const [entranceFeeUsd]: any = useContractCall({\n        abi: artemLotteryInterface,\n        address: artemLotteryAddress,\n        method: \"usdEntryFee\",\n        args: [],\n    }) ?? []\n\n    const formatted = balance\n        ? parseFloat(formatUnits(balance._hex, 18))\n        : -1\n\n    return entranceFeeUsd;\n}"]},"metadata":{},"sourceType":"module"}