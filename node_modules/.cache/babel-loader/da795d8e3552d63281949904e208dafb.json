{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEthers, useContractCall } from \"@usedapp/core\";\nimport { constants, utils } from \"ethers\";\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\";\nimport networkMapping from \"../chain-info/deployments/map.json\";\nexport const useLotteryTimeStamp = () => {\n  _s();\n\n  var _useContractCall;\n\n  const {\n    chainId\n  } = useEthers();\n  const {\n    abi\n  } = ArtemLottery;\n  const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero;\n  const artemLotteryInterface = new utils.Interface(abi);\n  const [lastTimeStamp] = (_useContractCall = useContractCall({\n    abi: artemLotteryInterface,\n    address: artemLotteryAddress,\n    method: \"lastTimeStamp\",\n    args: []\n  })) !== null && _useContractCall !== void 0 ? _useContractCall : [];\n  const timstampForHumans = lastTimeStamp ? new Date((lastTimeStamp === null || lastTimeStamp === void 0 ? void 0 : lastTimeStamp.toNumber()) * 1000).toString() : \"No data\";\n  return timstampForHumans;\n};\n\n_s(useLotteryTimeStamp, \"My0ConC8wq5+sD2i0i5tnHZ+TJ8=\", false, function () {\n  return [useEthers, useContractCall];\n});\n\nfunction time_ago(time) {\n  switch (typeof time) {\n    case 'number':\n      break;\n\n    case 'string':\n      time = +new Date(time);\n      break;\n\n    case 'object':\n      if (time.constructor === Date) time = time.getTime();\n      break;\n\n    default:\n      time = +new Date();\n  }\n\n  var time_formats = [[60, 'seconds', 1], // 60\n  [120, '1 minute ago', '1 minute from now'], // 60*2\n  [3600, 'minutes', 60], // 60*60, 60\n  [7200, '1 hour ago', '1 hour from now'], // 60*60*2\n  [86400, 'hours', 3600], // 60*60*24, 60*60\n  [172800, 'Yesterday', 'Tomorrow'], // 60*60*24*2\n  [604800, 'days', 86400], // 60*60*24*7, 60*60*24\n  [1209600, 'Last week', 'Next week'], // 60*60*24*7*4*2\n  [2419200, 'weeks', 604800], // 60*60*24*7*4, 60*60*24*7\n  [4838400, 'Last month', 'Next month'], // 60*60*24*7*4*2\n  [29030400, 'months', 2419200], // 60*60*24*7*4*12, 60*60*24*7*4\n  [58060800, 'Last year', 'Next year'], // 60*60*24*7*4*12*2\n  [2903040000, 'years', 29030400], // 60*60*24*7*4*12*100, 60*60*24*7*4*12\n  [5806080000, 'Last century', 'Next century'], // 60*60*24*7*4*12*100*2\n  [58060800000, 'centuries', 2903040000] // 60*60*24*7*4*12*100*20, 60*60*24*7*4*12*100\n  ];\n  var seconds = (+new Date() - time) / 1000,\n      token = 'ago',\n      list_choice = 1;\n\n  if (seconds == 0) {\n    return 'Just now';\n  }\n\n  if (seconds < 0) {\n    seconds = Math.abs(seconds);\n    token = 'from now';\n    list_choice = 2;\n  }\n\n  var i = 0,\n      format;\n\n  while (format = time_formats[i++]) if (seconds < format[0]) {\n    if (typeof format[2] == 'string') return format[list_choice];else return Math.floor(seconds / format[2]) + ' ' + format[1] + ' ' + token;\n  }\n\n  return time;\n}","map":{"version":3,"sources":["/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useLotteryTimeStamp.ts"],"names":["useEthers","useContractCall","constants","utils","ArtemLottery","networkMapping","useLotteryTimeStamp","chainId","abi","artemLotteryAddress","String","AddressZero","artemLotteryInterface","Interface","lastTimeStamp","address","method","args","timstampForHumans","Date","toNumber","toString","time_ago","time","constructor","getTime","time_formats","seconds","token","list_choice","Math","abs","i","format","floor"],"mappings":"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","sourcesContent":["import { useEthers, useContractFunction, useContractCall } from \"@usedapp/core\"\nimport { constants, utils, BigNumber } from \"ethers\"\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const useLotteryTimeStamp = (): String => {\n    const { chainId } = useEthers()\n    const { abi } = ArtemLottery\n    const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero\n    const artemLotteryInterface = new utils.Interface(abi)\n    const [lastTimeStamp]: any = useContractCall({\n        abi: artemLotteryInterface,\n        address: artemLotteryAddress,\n        method: \"lastTimeStamp\",\n        args: [],\n    }) ?? [];\n\n    const timstampForHumans = lastTimeStamp ? new Date(lastTimeStamp?.toNumber() * 1000).toString() : \"No data\"\n\n    return timstampForHumans;\n}\n\n\nfunction time_ago(time) {\n\n    switch (typeof time) {\n      case 'number':\n        break;\n      case 'string':\n        time = +new Date(time);\n        break;\n      case 'object':\n        if (time.constructor === Date) time = time.getTime();\n        break;\n      default:\n        time = +new Date();\n    }\n    var time_formats = [\n      [60, 'seconds', 1], // 60\n      [120, '1 minute ago', '1 minute from now'], // 60*2\n      [3600, 'minutes', 60], // 60*60, 60\n      [7200, '1 hour ago', '1 hour from now'], // 60*60*2\n      [86400, 'hours', 3600], // 60*60*24, 60*60\n      [172800, 'Yesterday', 'Tomorrow'], // 60*60*24*2\n      [604800, 'days', 86400], // 60*60*24*7, 60*60*24\n      [1209600, 'Last week', 'Next week'], // 60*60*24*7*4*2\n      [2419200, 'weeks', 604800], // 60*60*24*7*4, 60*60*24*7\n      [4838400, 'Last month', 'Next month'], // 60*60*24*7*4*2\n      [29030400, 'months', 2419200], // 60*60*24*7*4*12, 60*60*24*7*4\n      [58060800, 'Last year', 'Next year'], // 60*60*24*7*4*12*2\n      [2903040000, 'years', 29030400], // 60*60*24*7*4*12*100, 60*60*24*7*4*12\n      [5806080000, 'Last century', 'Next century'], // 60*60*24*7*4*12*100*2\n      [58060800000, 'centuries', 2903040000] // 60*60*24*7*4*12*100*20, 60*60*24*7*4*12*100\n    ];\n    var seconds = (+new Date() - time) / 1000,\n      token = 'ago',\n      list_choice = 1;\n  \n    if (seconds == 0) {\n      return 'Just now'\n    }\n    if (seconds < 0) {\n      seconds = Math.abs(seconds);\n      token = 'from now';\n      list_choice = 2;\n    }\n    var i = 0,\n      format;\n    while (format = time_formats[i++])\n      if (seconds < format[0]) {\n        if (typeof format[2] == 'string')\n          return format[list_choice];\n        else\n          return Math.floor(seconds / format[2]) + ' ' + format[1] + ' ' + token;\n      }\n    return time;\n  }"]},"metadata":{},"sourceType":"module"}