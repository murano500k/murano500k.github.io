{"ast":null,"code":"var _jsxFileName = \"/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/components/LotteryState.tsx\",\n    _s = $RefreshSig$();\n\nimport { useLotteryTimeStamp, useLotteryCounter, useRecentWinner, useLotteryStateAdvanced } from \"../hooks\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { useLotteryDuration } from \"../hooks/useLotteryDuration\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  title: {\n    color: theme.palette.common.white,\n    textAlign: \"center\",\n    padding: theme.spacing(4)\n  },\n  subtitle: {\n    color: theme.palette.common.white,\n    textAlign: \"center\",\n    padding: theme.spacing(1)\n  }\n}));\nexport const LotteryState = () => {\n  _s();\n\n  const classes = useStyles();\n  const lotteryStateAdvanced = useLotteryStateAdvanced();\n  const lotteryState = parseLotteryState(lotteryStateAdvanced[0]);\n  const balance = parseLotteryBalance(lotteryStateAdvanced[1]);\n  const counter = useLotteryCounter();\n  const timestamp = useLotteryTimeStamp();\n  const recentWinner = useRecentWinner();\n  const lotteryDuration = useLotteryDuration();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: classes.subtitle,\n      children: [\" Lottery is \", lotteryState, \" now\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: classes.subtitle,\n      children: [\" Lottery balance is \", balance, \" ethers\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: classes.subtitle,\n      children: [\" Recent winner is \", recentWinner]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: classes.subtitle,\n      children: [\" Lottery counter is \", counter ? counter.toNumber() : -10]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: classes.subtitle,\n      children: [\" last updated \", timestamp]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: classes.subtitle,\n      children: [\" Lottery duration is \", lotteryDuration === null || lotteryDuration === void 0 ? void 0 : lotteryDuration.toNumber(), \" seconds\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(LotteryState, \"/sg0fNZEc4boks3OxDJReXJob9U=\", false, function () {\n  return [useStyles, useLotteryStateAdvanced, useLotteryCounter, useLotteryTimeStamp, useRecentWinner, useLotteryDuration];\n});\n\n_c = LotteryState;\nvar LOTTERY_STATE;\n\n(function (LOTTERY_STATE) {\n  LOTTERY_STATE[LOTTERY_STATE[\"OPEN\"] = 0] = \"OPEN\";\n  LOTTERY_STATE[LOTTERY_STATE[\"CLOSED\"] = 1] = \"CLOSED\";\n  LOTTERY_STATE[LOTTERY_STATE[\"CALCULATING_WINNER\"] = 2] = \"CALCULATING_WINNER\";\n})(LOTTERY_STATE || (LOTTERY_STATE = {}));\n\nexport const parseLotteryState = lottery_state => {\n  switch (lottery_state) {\n    case LOTTERY_STATE.OPEN:\n      return \"open\";\n\n    case LOTTERY_STATE.CLOSED:\n      return \"closed\";\n\n    case LOTTERY_STATE.CALCULATING_WINNER:\n      return \"calculating winner\";\n\n    default:\n      return \"not working!\";\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"LotteryState\");","map":{"version":3,"sources":["/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/components/LotteryState.tsx"],"names":["useLotteryTimeStamp","useLotteryCounter","useRecentWinner","useLotteryStateAdvanced","makeStyles","useLotteryDuration","useStyles","theme","title","color","palette","common","white","textAlign","padding","spacing","subtitle","LotteryState","classes","lotteryStateAdvanced","lotteryState","parseLotteryState","balance","parseLotteryBalance","counter","timestamp","recentWinner","lotteryDuration","toNumber","LOTTERY_STATE","lottery_state","OPEN","CLOSED","CALCULATING_WINNER"],"mappings":";;;AAAA,SAA6CA,mBAA7C,EAAkEC,iBAAlE,EAAqFC,eAArF,EAAsGC,uBAAtG,QAAqI,UAArI;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,kBAAT,QAAmC,6BAAnC;;;AAIA,MAAMC,SAAS,GAAGF,UAAU,CAAEG,KAAD,KAAY;AACrCC,EAAAA,KAAK,EAAE;AACHC,IAAAA,KAAK,EAAEF,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBC,KADzB;AAEHC,IAAAA,SAAS,EAAE,QAFR;AAGHC,IAAAA,OAAO,EAAEP,KAAK,CAACQ,OAAN,CAAc,CAAd;AAHN,GAD8B;AAMrCC,EAAAA,QAAQ,EAAE;AACNP,IAAAA,KAAK,EAAEF,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBC,KADtB;AAENC,IAAAA,SAAS,EAAE,QAFL;AAGNC,IAAAA,OAAO,EAAEP,KAAK,CAACQ,OAAN,CAAc,CAAd;AAHH;AAN2B,CAAZ,CAAD,CAA5B;AAaA,OAAO,MAAME,YAAY,GAAG,MAAM;AAAA;;AAC9B,QAAMC,OAAO,GAAGZ,SAAS,EAAzB;AACA,QAAMa,oBAAoB,GAAGhB,uBAAuB,EAApD;AAEA,QAAMiB,YAAY,GAAGC,iBAAiB,CAACF,oBAAoB,CAAC,CAAD,CAArB,CAAtC;AACA,QAAMG,OAAO,GAAGC,mBAAmB,CAACJ,oBAAoB,CAAC,CAAD,CAArB,CAAnC;AACA,QAAMK,OAAO,GAAGvB,iBAAiB,EAAjC;AACA,QAAMwB,SAAS,GAAGzB,mBAAmB,EAArC;AACA,QAAM0B,YAAY,GAAGxB,eAAe,EAApC;AACA,QAAMyB,eAAe,GAAGtB,kBAAkB,EAA1C;AACA,sBACI;AAAA,4BACI;AAAI,MAAA,SAAS,EAAEa,OAAO,CAACF,QAAvB;AAAA,iCAA8CI,YAA9C;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAI,MAAA,SAAS,EAAEF,OAAO,CAACF,QAAvB;AAAA,yCAAsDM,OAAtD;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAI,MAAA,SAAS,EAAEJ,OAAO,CAACF,QAAvB;AAAA,uCAAoDU,YAApD;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAI,MAAA,SAAS,EAAER,OAAO,CAACF,QAAvB;AAAA,yCAAsDQ,OAAO,GAAGA,OAAO,CAACI,QAAR,EAAH,GAAwB,CAAC,EAAtF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAI,MAAA,SAAS,EAAEV,OAAO,CAACF,QAAvB;AAAA,mCAAgDS,SAAhD;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI;AAAI,MAAA,SAAS,EAAEP,OAAO,CAACF,QAAvB;AAAA,0CAAuDW,eAAvD,aAAuDA,eAAvD,uBAAuDA,eAAe,CAAEC,QAAjB,EAAvD;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA,kBADJ;AAUH,CApBM;;GAAMX,Y;UACOX,S,EACaH,uB,EAIbF,iB,EACED,mB,EACGE,e,EACGG,kB;;;KATfY,Y;IAqBRY,a;;WAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;GAAAA,a,KAAAA,a;;AAML,OAAO,MAAMR,iBAAiB,GAAIS,aAAD,IAAgC;AAC7D,UAAQA,aAAR;AACI,SAAKD,aAAa,CAACE,IAAnB;AACI,aAAO,MAAP;;AACJ,SAAKF,aAAa,CAACG,MAAnB;AACI,aAAO,QAAP;;AACJ,SAAKH,aAAa,CAACI,kBAAnB;AACI,aAAO,oBAAP;;AACJ;AACI,aAAO,cAAP;AARR;AAUH,CAXM","sourcesContent":["import { useLotteryState, useLotteryBalance, useLotteryTimeStamp, useLotteryCounter, useRecentWinner, useLotteryStateAdvanced } from \"../hooks\"\nimport { makeStyles } from \"@material-ui/core\"\nimport { useLotteryDuration } from \"../hooks/useLotteryDuration\"\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        color: theme.palette.common.white,\n        textAlign: \"center\",\n        padding: theme.spacing(4)\n    },\n    subtitle: {\n        color: theme.palette.common.white,\n        textAlign: \"center\",\n        padding: theme.spacing(1)\n    },\n}))\n\nexport const LotteryState = () => {\n    const classes = useStyles()\n    const lotteryStateAdvanced = useLotteryStateAdvanced()\n\n    const lotteryState = parseLotteryState(lotteryStateAdvanced[0])\n    const balance = parseLotteryBalance(lotteryStateAdvanced[1])\n    const counter = useLotteryCounter()\n    const timestamp = useLotteryTimeStamp()\n    const recentWinner = useRecentWinner()\n    const lotteryDuration = useLotteryDuration()\n    return (\n        <>\n            <h2 className={classes.subtitle}> Lottery is {lotteryState} now</h2>\n            <h2 className={classes.subtitle}> Lottery balance is {balance} ethers</h2>\n            <h2 className={classes.subtitle}> Recent winner is {recentWinner}</h2>\n            <h2 className={classes.subtitle}> Lottery counter is {counter ? counter.toNumber() : -10}</h2>\n            <h2 className={classes.subtitle}> last updated {timestamp}</h2>\n            <h2 className={classes.subtitle}> Lottery duration is {lotteryDuration?.toNumber()} seconds</h2>\n\n        </>)\n}\nenum LOTTERY_STATE {\n    OPEN,\n    CLOSED,\n    CALCULATING_WINNER\n}\n\nexport const parseLotteryState = (lottery_state: any): string => {\n    switch (lottery_state) {\n        case LOTTERY_STATE.OPEN:\n            return \"open\";\n        case LOTTERY_STATE.CLOSED:\n            return \"closed\";\n        case LOTTERY_STATE.CALCULATING_WINNER:\n            return \"calculating winner\"\n        default:\n            return \"not working!\"\n    }\n}"]},"metadata":{},"sourceType":"module"}