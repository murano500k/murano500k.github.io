{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEthers, useContractCall } from \"@usedapp/core\";\nimport { constants, utils } from \"ethers\";\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\";\nimport networkMapping from \"../chain-info/deployments/map.json\";\nvar LOTTERY_STATE;\n\n(function (LOTTERY_STATE) {\n  LOTTERY_STATE[LOTTERY_STATE[\"OPEN\"] = 0] = \"OPEN\";\n  LOTTERY_STATE[LOTTERY_STATE[\"CLOSED\"] = 1] = \"CLOSED\";\n  LOTTERY_STATE[\"CALCULATING_WINNER\"] = \"calculating winner...\";\n})(LOTTERY_STATE || (LOTTERY_STATE = {}));\n\nvar AnEnum;\n\n(function (AnEnum) {\n  AnEnum[AnEnum[\"One\"] = 1] = \"One\";\n  AnEnum[AnEnum[\"Two\"] = 2] = \"Two\";\n})(AnEnum || (AnEnum = {}));\n\nlet stringOne = AnEnum[1]; // \"One\"\n\nexport const useLotteryState = () => {\n  _s();\n\n  var _useContractCall;\n\n  const {\n    chainId\n  } = useEthers();\n  const {\n    abi\n  } = ArtemLottery;\n  const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero;\n  const artemLotteryInterface = new utils.Interface(abi);\n  const [lottery_state] = (_useContractCall = useContractCall({\n    abi: artemLotteryInterface,\n    address: artemLotteryAddress,\n    method: \"lottery_state\",\n    args: []\n  })) !== null && _useContractCall !== void 0 ? _useContractCall : [];\n  let num = lottery_state;\n  let lotteryStateWithType = lottery_state ? LOTTERY_STATE[num] : \"nothing\";\n  return lottery_state;\n};\n\n_s(useLotteryState, \"My0ConC8wq5+sD2i0i5tnHZ+TJ8=\", false, function () {\n  return [useEthers, useContractCall];\n});","map":{"version":3,"sources":["/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useLotteryState.ts"],"names":["useEthers","useContractCall","constants","utils","ArtemLottery","networkMapping","LOTTERY_STATE","AnEnum","stringOne","useLotteryState","chainId","abi","artemLotteryAddress","String","AddressZero","artemLotteryInterface","Interface","lottery_state","address","method","args","num","lotteryStateWithType"],"mappings":";;AAAA,SAASA,SAAT,EAAyCC,eAAzC,QAAgE,eAAhE;AACA,SAASC,SAAT,EAAoBC,KAApB,QAA4C,QAA5C;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;IAEKC,a;;WAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a;GAAAA,a,KAAAA,a;;IAMAC,M;;WAAAA,M;AAAAA,EAAAA,M,CAAAA,M;AAAAA,EAAAA,M,CAAAA,M;GAAAA,M,KAAAA,M;;AAKJ,IAAIC,SAAS,GAAGD,MAAM,CAAC,CAAD,CAAtB,C,CAA2B;;AAE5B,OAAO,MAAME,eAAe,GAAG,MAA0B;AAAA;;AAAA;;AACrD,QAAM;AAAEC,IAAAA;AAAF,MAAcV,SAAS,EAA7B;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAUP,YAAhB;AACA,QAAMQ,mBAAmB,GAAGF,OAAO,GAAGL,cAAc,CAACQ,MAAM,CAACH,OAAD,CAAP,CAAd,CAAgC,cAAhC,EAAgD,CAAhD,CAAH,GAAwDR,SAAS,CAACY,WAArG;AACA,QAAMC,qBAAqB,GAAG,IAAIZ,KAAK,CAACa,SAAV,CAAoBL,GAApB,CAA9B;AAEA,QAAM,CAACM,aAAD,wBAAuBhB,eAAe,CAAC;AACzCU,IAAAA,GAAG,EAAEI,qBADoC;AAEzCG,IAAAA,OAAO,EAAEN,mBAFgC;AAGzCO,IAAAA,MAAM,EAAE,eAHiC;AAIzCC,IAAAA,IAAI,EAAE;AAJmC,GAAD,CAAtC,+DAKA,EALN;AAOA,MAAIC,GAAW,GAAGJ,aAAlB;AAEA,MAAIK,oBAAoB,GAAGL,aAAa,GAAGX,aAAa,CAACe,GAAD,CAAhB,GAAwB,SAAhE;AAIA,SAAOJ,aAAP;AACH,CApBM;;GAAMR,e;UACWT,S,EAKSC,e","sourcesContent":["import { useEthers, useContractFunction, useContractCall } from \"@usedapp/core\"\nimport { constants, utils, BigNumber } from \"ethers\"\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nenum LOTTERY_STATE {\n    OPEN,\n    CLOSED,\n    CALCULATING_WINNER = \"calculating winner...\"\n}\n\nenum AnEnum {\n    One = 1,\n       Two = 2\n }\n\n let stringOne = AnEnum[1]; // \"One\"\n\nexport const useLotteryState = (): number | undefined => {\n    const { chainId } = useEthers()\n    const { abi } = ArtemLottery\n    const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero\n    const artemLotteryInterface = new utils.Interface(abi)\n\n    const [lottery_state]: any = useContractCall({\n        abi: artemLotteryInterface,\n        address: artemLotteryAddress,\n        method: \"lottery_state\",\n        args: [],\n    }) ?? [];\n\n    let num: number = lottery_state\n\n    let lotteryStateWithType = lottery_state ? LOTTERY_STATE[num] : \"nothing\";\n\n\n\n    return lottery_state;\n}"]},"metadata":{},"sourceType":"module"}