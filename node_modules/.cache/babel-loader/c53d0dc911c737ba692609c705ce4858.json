{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEthers, useContractCall } from \"@usedapp/core\";\nimport { constants, utils } from \"ethers\";\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\";\nimport networkMapping from \"../chain-info/deployments/map.json\";\nexport const useLotteryTimeStamp = () => {\n  _s();\n\n  var _useContractCall;\n\n  const {\n    chainId\n  } = useEthers();\n  const {\n    abi\n  } = ArtemLottery;\n  const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero;\n  const artemLotteryInterface = new utils.Interface(abi);\n  const [lastTimeStamp] = (_useContractCall = useContractCall({\n    abi: artemLotteryInterface,\n    address: artemLotteryAddress,\n    method: \"lastTimeStamp\",\n    args: []\n  })) !== null && _useContractCall !== void 0 ? _useContractCall : [];\n  const timstampForHumans = lastTimeStamp ? new Date((lastTimeStamp === null || lastTimeStamp === void 0 ? void 0 : lastTimeStamp.toNumber()) * 1000).toString() : \"No data\";\n  return timstampForHumans;\n};\n\n_s(useLotteryTimeStamp, \"My0ConC8wq5+sD2i0i5tnHZ+TJ8=\", false, function () {\n  return [useEthers, useContractCall];\n});\n\nfunction timeSince(date) {\n  var seconds = Math.floor((new Date() - date) / 1000);\n  var interval = seconds / 31536000;\n\n  if (interval > 1) {\n    return Math.floor(interval) + \" years\";\n  }\n\n  interval = seconds / 2592000;\n\n  if (interval > 1) {\n    return Math.floor(interval) + \" months\";\n  }\n\n  interval = seconds / 86400;\n\n  if (interval > 1) {\n    return Math.floor(interval) + \" days\";\n  }\n\n  interval = seconds / 3600;\n\n  if (interval > 1) {\n    return Math.floor(interval) + \" hours\";\n  }\n\n  interval = seconds / 60;\n\n  if (interval > 1) {\n    return Math.floor(interval) + \" minutes\";\n  }\n\n  return Math.floor(seconds) + \" seconds\";\n}","map":{"version":3,"sources":["/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useLotteryTimeStamp.ts"],"names":["useEthers","useContractCall","constants","utils","ArtemLottery","networkMapping","useLotteryTimeStamp","chainId","abi","artemLotteryAddress","String","AddressZero","artemLotteryInterface","Interface","lastTimeStamp","address","method","args","timstampForHumans","Date","toNumber","toString","timeSince","date","seconds","Math","floor","interval"],"mappings":";;AAAA,SAASA,SAAT,EAAyCC,eAAzC,QAAgE,eAAhE;AACA,SAASC,SAAT,EAAoBC,KAApB,QAA4C,QAA5C;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,OAAO,MAAMC,mBAAmB,GAAG,MAAc;AAAA;;AAAA;;AAC7C,QAAM;AAAEC,IAAAA;AAAF,MAAcP,SAAS,EAA7B;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAUJ,YAAhB;AACA,QAAMK,mBAAmB,GAAGF,OAAO,GAAGF,cAAc,CAACK,MAAM,CAACH,OAAD,CAAP,CAAd,CAAgC,cAAhC,EAAgD,CAAhD,CAAH,GAAwDL,SAAS,CAACS,WAArG;AACA,QAAMC,qBAAqB,GAAG,IAAIT,KAAK,CAACU,SAAV,CAAoBL,GAApB,CAA9B;AACA,QAAM,CAACM,aAAD,wBAAuBb,eAAe,CAAC;AACzCO,IAAAA,GAAG,EAAEI,qBADoC;AAEzCG,IAAAA,OAAO,EAAEN,mBAFgC;AAGzCO,IAAAA,MAAM,EAAE,eAHiC;AAIzCC,IAAAA,IAAI,EAAE;AAJmC,GAAD,CAAtC,+DAKA,EALN;AAOA,QAAMC,iBAAiB,GAAGJ,aAAa,GAAG,IAAIK,IAAJ,CAAS,CAAAL,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEM,QAAf,MAA4B,IAArC,EAA2CC,QAA3C,EAAH,GAA2D,SAAlG;AAEA,SAAOH,iBAAP;AACH,CAfM;;GAAMZ,mB;UACWN,S,EAISC,e;;;AAajC,SAASqB,SAAT,CAAmBC,IAAnB,EAAyB;AAEvB,MAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAW,CAAC,IAAIP,IAAJ,KAAaI,IAAd,IAAsB,IAAjC,CAAd;AAEA,MAAII,QAAQ,GAAGH,OAAO,GAAG,QAAzB;;AAEA,MAAIG,QAAQ,GAAG,CAAf,EAAkB;AAChB,WAAOF,IAAI,CAACC,KAAL,CAAWC,QAAX,IAAuB,QAA9B;AACD;;AACDA,EAAAA,QAAQ,GAAGH,OAAO,GAAG,OAArB;;AACA,MAAIG,QAAQ,GAAG,CAAf,EAAkB;AAChB,WAAOF,IAAI,CAACC,KAAL,CAAWC,QAAX,IAAuB,SAA9B;AACD;;AACDA,EAAAA,QAAQ,GAAGH,OAAO,GAAG,KAArB;;AACA,MAAIG,QAAQ,GAAG,CAAf,EAAkB;AAChB,WAAOF,IAAI,CAACC,KAAL,CAAWC,QAAX,IAAuB,OAA9B;AACD;;AACDA,EAAAA,QAAQ,GAAGH,OAAO,GAAG,IAArB;;AACA,MAAIG,QAAQ,GAAG,CAAf,EAAkB;AAChB,WAAOF,IAAI,CAACC,KAAL,CAAWC,QAAX,IAAuB,QAA9B;AACD;;AACDA,EAAAA,QAAQ,GAAGH,OAAO,GAAG,EAArB;;AACA,MAAIG,QAAQ,GAAG,CAAf,EAAkB;AAChB,WAAOF,IAAI,CAACC,KAAL,CAAWC,QAAX,IAAuB,UAA9B;AACD;;AACD,SAAOF,IAAI,CAACC,KAAL,CAAWF,OAAX,IAAsB,UAA7B;AACD","sourcesContent":["import { useEthers, useContractFunction, useContractCall } from \"@usedapp/core\"\nimport { constants, utils, BigNumber } from \"ethers\"\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const useLotteryTimeStamp = (): String => {\n    const { chainId } = useEthers()\n    const { abi } = ArtemLottery\n    const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero\n    const artemLotteryInterface = new utils.Interface(abi)\n    const [lastTimeStamp]: any = useContractCall({\n        abi: artemLotteryInterface,\n        address: artemLotteryAddress,\n        method: \"lastTimeStamp\",\n        args: [],\n    }) ?? [];\n\n    const timstampForHumans = lastTimeStamp ? new Date(lastTimeStamp?.toNumber() * 1000).toString() : \"No data\"\n\n    return timstampForHumans;\n}\n\n\nfunction timeSince(date) {\n\n  var seconds = Math.floor((new Date() - date) / 1000);\n\n  var interval = seconds / 31536000;\n\n  if (interval > 1) {\n    return Math.floor(interval) + \" years\";\n  }\n  interval = seconds / 2592000;\n  if (interval > 1) {\n    return Math.floor(interval) + \" months\";\n  }\n  interval = seconds / 86400;\n  if (interval > 1) {\n    return Math.floor(interval) + \" days\";\n  }\n  interval = seconds / 3600;\n  if (interval > 1) {\n    return Math.floor(interval) + \" hours\";\n  }\n  interval = seconds / 60;\n  if (interval > 1) {\n    return Math.floor(interval) + \" minutes\";\n  }\n  return Math.floor(seconds) + \" seconds\";\n}"]},"metadata":{},"sourceType":"module"}