{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useEthers, useContractFunction } from \"@usedapp/core\";\nimport { constants, utils } from \"ethers\";\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\";\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\";\nimport { Contract } from '@usedapp/core/node_modules/@ethersproject/contracts';\nimport networkMapping from \"../chain-info/deployments/map.json\";\nexport const useStakeTokens = tokenAddress => {\n  _s();\n\n  // address\n  // abi\n  // chainId\n  const {\n    chainId\n  } = useEthers();\n  const {\n    abi\n  } = TokenFarm;\n  const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero;\n  const tokenFarmInterface = new utils.Interface(abi);\n  const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface);\n  const erc20ABI = ERC20.abi;\n  const erc20Interface = new utils.Interface(erc20ABI);\n  const erc20Contract = new Contract(tokenAddress, erc20Interface); // approve\n\n  const {\n    send: approveErc20Send,\n    state: approveAndStakeErc20State\n  } = useContractFunction(erc20Contract, \"approve\", {\n    transactionName: \"Approve ERC20 transfer\"\n  });\n\n  const approveAndStake = amount => {\n    setAmountToStake(amount);\n    return approveErc20Send(tokenFarmAddress, amount);\n  }; // stake\n\n\n  const {\n    send: stakeSend,\n    state: stakeState\n  } = useContractFunction(tokenFarmContract, \"stakeTokens\", {\n    transactionName: \"Stake Tokens\"\n  });\n  const [amountToStake, setAmountToStake] = useState(\"0\"); //useEffect\n\n  useEffect(() => {\n    if (approveAndStakeErc20State.status === \"Success\") {\n      stakeSend(amountToStake, tokenAddress);\n    }\n  }, [approveAndStakeErc20State, amountToStake, tokenAddress]);\n  const [state, setState] = useState(approveAndStakeErc20State);\n  useEffect(() => {\n    if (approveAndStakeErc20State.status === \"Success\") {\n      setState(stakeState);\n    } else {\n      setState(approveAndStakeErc20State);\n    }\n  }, [approveAndStakeErc20State, stakeState]);\n  return {\n    approveAndStake,\n    state\n  };\n};\n\n_s(useStakeTokens, \"yIeHWCrb78k3WwC/MWIRTNpGMLM=\", false, function () {\n  return [useEthers, useContractFunction, useContractFunction];\n});","map":{"version":3,"sources":["/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useStakeTokens.ts"],"names":["useEffect","useState","useEthers","useContractFunction","constants","utils","TokenFarm","ERC20","Contract","networkMapping","useStakeTokens","tokenAddress","chainId","abi","tokenFarmAddress","String","AddressZero","tokenFarmInterface","Interface","tokenFarmContract","erc20ABI","erc20Interface","erc20Contract","send","approveErc20Send","state","approveAndStakeErc20State","transactionName","approveAndStake","amount","setAmountToStake","stakeSend","stakeState","amountToStake","status","setState"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,EAAoBC,mBAApB,QAA+C,eAA/C;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,QAAjC;AACA,OAAOC,SAAP,MAAsB,wCAAtB;AACA,OAAOC,KAAP,MAAkB,wCAAlB;AACA,SAASC,QAAT,QAAyB,qDAAzB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,OAAO,MAAMC,cAAc,GAAIC,YAAD,IAA0B;AAAA;;AACpD;AACA;AACA;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcV,SAAS,EAA7B;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAUP,SAAhB;AACA,QAAMQ,gBAAgB,GAAGF,OAAO,GAAGH,cAAc,CAACM,MAAM,CAACH,OAAD,CAAP,CAAd,CAAgC,WAAhC,EAA6C,CAA7C,CAAH,GAAqDR,SAAS,CAACY,WAA/F;AACA,QAAMC,kBAAkB,GAAG,IAAIZ,KAAK,CAACa,SAAV,CAAoBL,GAApB,CAA3B;AACA,QAAMM,iBAAiB,GAAG,IAAIX,QAAJ,CAAaM,gBAAb,EAA+BG,kBAA/B,CAA1B;AAEA,QAAMG,QAAQ,GAAGb,KAAK,CAACM,GAAvB;AACA,QAAMQ,cAAc,GAAG,IAAIhB,KAAK,CAACa,SAAV,CAAoBE,QAApB,CAAvB;AACA,QAAME,aAAa,GAAG,IAAId,QAAJ,CAAaG,YAAb,EAA2BU,cAA3B,CAAtB,CAZoD,CAapD;;AACA,QAAM;AAAEE,IAAAA,IAAI,EAAEC,gBAAR;AAA0BC,IAAAA,KAAK,EAAEC;AAAjC,MACFvB,mBAAmB,CAACmB,aAAD,EAAgB,SAAhB,EAA2B;AAC1CK,IAAAA,eAAe,EAAE;AADyB,GAA3B,CADvB;;AAIA,QAAMC,eAAe,GAAIC,MAAD,IAAoB;AACxCC,IAAAA,gBAAgB,CAACD,MAAD,CAAhB;AACA,WAAOL,gBAAgB,CAACV,gBAAD,EAAmBe,MAAnB,CAAvB;AACH,GAHD,CAlBoD,CAsBpD;;;AACA,QAAM;AAAEN,IAAAA,IAAI,EAAEQ,SAAR;AAAmBN,IAAAA,KAAK,EAAEO;AAA1B,MACF7B,mBAAmB,CAACgB,iBAAD,EAAoB,aAApB,EAAmC;AAClDQ,IAAAA,eAAe,EAAE;AADiC,GAAnC,CADvB;AAIA,QAAM,CAACM,aAAD,EAAgBH,gBAAhB,IAAoC7B,QAAQ,CAAC,GAAD,CAAlD,CA3BoD,CA6BpD;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI0B,yBAAyB,CAACQ,MAA1B,KAAqC,SAAzC,EAAoD;AAChDH,MAAAA,SAAS,CAACE,aAAD,EAAgBtB,YAAhB,CAAT;AACH;AACJ,GAJQ,EAIN,CAACe,yBAAD,EAA4BO,aAA5B,EAA2CtB,YAA3C,CAJM,CAAT;AAOA,QAAM,CAACc,KAAD,EAAQU,QAAR,IAAoBlC,QAAQ,CAACyB,yBAAD,CAAlC;AAEA1B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI0B,yBAAyB,CAACQ,MAA1B,KAAqC,SAAzC,EAAoD;AAChDC,MAAAA,QAAQ,CAACH,UAAD,CAAR;AACH,KAFD,MAEO;AACHG,MAAAA,QAAQ,CAACT,yBAAD,CAAR;AACH;AACJ,GANQ,EAMN,CAACA,yBAAD,EAA4BM,UAA5B,CANM,CAAT;AAQA,SAAO;AAAEJ,IAAAA,eAAF;AAAmBH,IAAAA;AAAnB,GAAP;AACH,CAhDM;;GAAMf,c;UAIWR,S,EAWhBC,mB,EASAA,mB","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport { constants, utils } from \"ethers\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\"\nimport { Contract } from '@usedapp/core/node_modules/@ethersproject/contracts'\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const useStakeTokens = (tokenAddress: string) => {\n    // address\n    // abi\n    // chainId\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n    const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n    const erc20ABI = ERC20.abi\n    const erc20Interface = new utils.Interface(erc20ABI)\n    const erc20Contract = new Contract(tokenAddress, erc20Interface)\n    // approve\n    const { send: approveErc20Send, state: approveAndStakeErc20State } =\n        useContractFunction(erc20Contract, \"approve\", {\n            transactionName: \"Approve ERC20 transfer\",\n        })\n    const approveAndStake = (amount: string) => {\n        setAmountToStake(amount)\n        return approveErc20Send(tokenFarmAddress, amount)\n    }\n    // stake\n    const { send: stakeSend, state: stakeState } =\n        useContractFunction(tokenFarmContract, \"stakeTokens\", {\n            transactionName: \"Stake Tokens\",\n        })\n    const [amountToStake, setAmountToStake] = useState(\"0\")\n\n    //useEffect\n    useEffect(() => {\n        if (approveAndStakeErc20State.status === \"Success\") {\n            stakeSend(amountToStake, tokenAddress)\n        }\n    }, [approveAndStakeErc20State, amountToStake, tokenAddress])\n\n\n    const [state, setState] = useState(approveAndStakeErc20State)\n\n    useEffect(() => {\n        if (approveAndStakeErc20State.status === \"Success\") {\n            setState(stakeState)\n        } else {\n            setState(approveAndStakeErc20State)\n        }\n    }, [approveAndStakeErc20State, stakeState])\n\n    return { approveAndStake, state }\n}\n"]},"metadata":{},"sourceType":"module"}