{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEthers, useContractCalls } from \"@usedapp/core\";\nimport { constants, utils } from \"ethers\";\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\";\nimport networkMapping from \"../chain-info/deployments/map.json\";\nvar LOTTERY_STATE;\n\n(function (LOTTERY_STATE) {\n  LOTTERY_STATE[LOTTERY_STATE[\"OPEN\"] = 0] = \"OPEN\";\n  LOTTERY_STATE[LOTTERY_STATE[\"CLOSED\"] = 1] = \"CLOSED\";\n  LOTTERY_STATE[LOTTERY_STATE[\"CALCULATING_WINNER\"] = 2] = \"CALCULATING_WINNER\";\n})(LOTTERY_STATE || (LOTTERY_STATE = {}));\n\nconst LotteryContractCallNames = ['lottery_state', 'getBalance', 'lotteryCounter', 'recentWinner', 'lotteryDurationInSeconds', 'getEntranceFee', 'usdEntryFee'];\nexport const useLotteryStateAdvanced = () => {\n  _s();\n\n  var _useContractCalls;\n\n  const {\n    chainId\n  } = useEthers();\n  const {\n    abi\n  } = ArtemLottery;\n  const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero;\n  const artemLotteryInterface = new utils.Interface(abi);\n  let callsArray = [];\n  LotteryContractCallNames.forEach(function (contractCallName) {\n    callsArray.push({\n      abi: artemLotteryInterface,\n      address: artemLotteryAddress,\n      method: contractCallName,\n      args: []\n    });\n    console.log(\"adding \" + contractCallName);\n  });\n  const results_array = (_useContractCalls = useContractCalls(callsArray)) !== null && _useContractCalls !== void 0 ? _useContractCalls : [];\n\n  for (var _i = 0; _i < LotteryContractCallNames.length; _i++) {\n    console.log(\"result \" + _i + \" = \" + results_array[_i]);\n  }\n\n  return results_array;\n};\n\n_s(useLotteryStateAdvanced, \"lWARwgmfKB0Zr81Z1IoCAPVscoA=\", false, function () {\n  return [useEthers, useContractCalls];\n});","map":{"version":3,"sources":["/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useLotteryStateAdvanced.ts"],"names":["useEthers","useContractCalls","constants","utils","ArtemLottery","networkMapping","LOTTERY_STATE","LotteryContractCallNames","useLotteryStateAdvanced","chainId","abi","artemLotteryAddress","String","AddressZero","artemLotteryInterface","Interface","callsArray","forEach","contractCallName","push","address","method","args","console","log","results_array","_i","length"],"mappings":";;AAAA,SAASA,SAAT,EAAyCC,gBAAzC,QAA+E,eAA/E;AACA,SAASC,SAAT,EAAoBC,KAApB,QAA4C,QAA5C;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;IAGKC,a;;WAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;GAAAA,a,KAAAA,a;;AAML,MAAMC,wBAAkC,GAAG,CACvC,eADuC,EAEvC,YAFuC,EAGvC,gBAHuC,EAIvC,cAJuC,EAKvC,0BALuC,EAMvC,gBANuC,EAOvC,aAPuC,CAA3C;AAWA,OAAO,MAAMC,uBAAuB,GAAG,MAAa;AAAA;;AAAA;;AAChD,QAAM;AAAEC,IAAAA;AAAF,MAAcT,SAAS,EAA7B;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAUN,YAAhB;AACA,QAAMO,mBAAmB,GAAGF,OAAO,GAAGJ,cAAc,CAACO,MAAM,CAACH,OAAD,CAAP,CAAd,CAAgC,cAAhC,EAAgD,CAAhD,CAAH,GAAwDP,SAAS,CAACW,WAArG;AACA,QAAMC,qBAAqB,GAAG,IAAIX,KAAK,CAACY,SAAV,CAAoBL,GAApB,CAA9B;AAGA,MAAIM,UAAU,GAAG,EAAjB;AACAT,EAAAA,wBAAwB,CAACU,OAAzB,CAAiC,UAAUC,gBAAV,EAA4B;AACzDF,IAAAA,UAAU,CAACG,IAAX,CAAgB;AACZT,MAAAA,GAAG,EAAEI,qBADO;AAEZM,MAAAA,OAAO,EAAET,mBAFG;AAGZU,MAAAA,MAAM,EAAEH,gBAHI;AAIZI,MAAAA,IAAI,EAAE;AAJM,KAAhB;AAMAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYN,gBAAxB;AACH,GARD;AASA,QAAMO,aAAoB,wBAAGxB,gBAAgB,CAACe,UAAD,CAAnB,iEAAmC,EAA7D;;AAEA,OAAK,IAAIU,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGnB,wBAAwB,CAACoB,MAA/C,EAAuDD,EAAE,EAAzD,EAA6D;AACzDH,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYE,EAAZ,GAAiB,KAAjB,GAAyBD,aAAa,CAACC,EAAD,CAAlD;AACH;;AAED,SAAOD,aAAP;AACH,CAxBM;;GAAMjB,uB;UACWR,S,EAgBSC,gB","sourcesContent":["import { useEthers, useContractFunction, useContractCalls, ContractCall } from \"@usedapp/core\"\nimport { constants, utils, BigNumber } from \"ethers\"\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { LotteryState } from \"../components/LotteryState\"\n\nenum LOTTERY_STATE {\n    OPEN,\n    CLOSED,\n    CALCULATING_WINNER\n}\n\nconst LotteryContractCallNames: string[] = [\n    'lottery_state',\n    'getBalance',\n    'lotteryCounter',\n    'recentWinner',\n    'lotteryDurationInSeconds',\n    'getEntranceFee',\n    'usdEntryFee'\n]\n\n\nexport const useLotteryStateAdvanced = (): any[] => {\n    const { chainId } = useEthers()\n    const { abi } = ArtemLottery\n    const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero\n    const artemLotteryInterface = new utils.Interface(abi)\n\n\n    let callsArray = [] as ContractCall[];\n    LotteryContractCallNames.forEach(function (contractCallName) {\n        callsArray.push({\n            abi: artemLotteryInterface,\n            address: artemLotteryAddress,\n            method: contractCallName,\n            args: [],\n        })\n        console.log(\"adding \" + contractCallName);\n    })\n    const results_array: any[] = useContractCalls(callsArray) ?? [];\n\n    for (var _i = 0; _i < LotteryContractCallNames.length; _i++) {\n        console.log(\"result \" + _i + \" = \" + results_array[_i])\n    }\n\n    return results_array;\n}"]},"metadata":{},"sourceType":"module"}