{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEthers, useContractCall } from \"@usedapp/core\";\nimport { constants, utils } from \"ethers\";\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\";\nimport networkMapping from \"../chain-info/deployments/map.json\";\nexport const useLotteryCounter = () => {\n  _s();\n\n  var _useContractCall;\n\n  // address\n  // abi\n  // chainId\n  const {\n    chainId\n  } = useEthers();\n  console.log(\"chainId = \" + chainId);\n  const {\n    abi\n  } = ArtemLottery;\n  const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero;\n  const artemLotteryInterface = new utils.Interface(abi);\n  console.log(\"address = \" + artemLotteryAddress + \" interface=\" + artemLotteryInterface); //const artemLotteryContract = new Contract(artemLotteryAddress, artemLotteryInterface)\n\n  return (_useContractCall = useContractCall({\n    abi: artemLotteryInterface,\n    address: artemLotteryAddress,\n    method: \"lotteryCounter\",\n    args: []\n  })) !== null && _useContractCall !== void 0 ? _useContractCall : [];\n}; // const simpleContractInterface = new ethers.utils.Interface(simpleContractAbi);\n// export function useCount() {\n//     const [count]: any = useContractCall({\n//         abi: simpleContractInterface,\n//         address: simpleContractAddress,\n//         method: \"count\",\n//         args: [],\n//     }) ?? [];\n//     return count;\n// }\n\n_s(useLotteryCounter, \"My0ConC8wq5+sD2i0i5tnHZ+TJ8=\", false, function () {\n  return [useEthers, useContractCall];\n});","map":{"version":3,"sources":["/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useLotteryCounter.ts"],"names":["useEthers","useContractCall","constants","utils","ArtemLottery","networkMapping","useLotteryCounter","chainId","console","log","abi","artemLotteryAddress","String","AddressZero","artemLotteryInterface","Interface","address","method","args"],"mappings":";;AACA,SAASA,SAAT,EAAyCC,eAAzC,QAAgE,eAAhE;AACA,SAAiBC,SAAjB,EAA4BC,KAA5B,QAAyC,QAAzC;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AAEA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AAAA;;AAAA;;AACnC;AACA;AACA;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcP,SAAS,EAA7B;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAeF,OAA3B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAUN,YAAhB;AACA,QAAMO,mBAAmB,GAAGJ,OAAO,GAAGF,cAAc,CAACO,MAAM,CAACL,OAAD,CAAP,CAAd,CAAgC,cAAhC,EAAgD,CAAhD,CAAH,GAAwDL,SAAS,CAACW,WAArG;AACA,QAAMC,qBAAqB,GAAG,IAAIX,KAAK,CAACY,SAAV,CAAoBL,GAApB,CAA9B;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAeE,mBAAf,GAAqC,aAArC,GAAqDG,qBAAjE,EATmC,CAUnC;;AACA,6BAAOb,eAAe,CAAC;AACnBS,IAAAA,GAAG,EAAEI,qBADc;AAEnBE,IAAAA,OAAO,EAAEL,mBAFU;AAGnBM,IAAAA,MAAM,EAAE,gBAHW;AAInBC,IAAAA,IAAI,EAAE;AAJa,GAAD,CAAtB,+DAKM,EALN;AAMH,CAjBM,C,CAqBP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GA/BaZ,iB;UAIWN,S,EAObC,e","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useEthers, useContractFunction, useContractCall } from \"@usedapp/core\"\nimport { ethers, constants, utils } from \"ethers\"\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\"\nimport { Contract } from '@ethersproject/contracts'\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const useLotteryCounter = () => {\n    // address\n    // abi\n    // chainId\n    const { chainId } = useEthers()\n    console.log(\"chainId = \" + chainId)\n    const { abi } = ArtemLottery\n    const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero\n    const artemLotteryInterface = new utils.Interface(abi)\n    console.log(\"address = \" + artemLotteryAddress + \" interface=\" + artemLotteryInterface)\n    //const artemLotteryContract = new Contract(artemLotteryAddress, artemLotteryInterface)\n    return useContractCall({\n        abi: artemLotteryInterface,\n        address: artemLotteryAddress,\n        method: \"lotteryCounter\",\n        args: [],\n    }) ?? [];\n}\n\n\n\n// const simpleContractInterface = new ethers.utils.Interface(simpleContractAbi);\n\n// export function useCount() {\n//     const [count]: any = useContractCall({\n//         abi: simpleContractInterface,\n//         address: simpleContractAddress,\n//         method: \"count\",\n//         args: [],\n//     }) ?? [];\n//     return count;\n// }"]},"metadata":{},"sourceType":"module"}