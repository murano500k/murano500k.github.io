{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEthers, useContractCalls } from \"@usedapp/core\";\nimport { constants, utils } from \"ethers\";\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\";\nimport networkMapping from \"../chain-info/deployments/map.json\";\nvar LOTTERY_STATE;\n\n(function (LOTTERY_STATE) {\n  LOTTERY_STATE[LOTTERY_STATE[\"OPEN\"] = 0] = \"OPEN\";\n  LOTTERY_STATE[LOTTERY_STATE[\"CLOSED\"] = 1] = \"CLOSED\";\n  LOTTERY_STATE[LOTTERY_STATE[\"CALCULATING_WINNER\"] = 2] = \"CALCULATING_WINNER\";\n})(LOTTERY_STATE || (LOTTERY_STATE = {}));\n\nexport class LotteryStatus {\n  constructor(state, balance, counter, public) {\n    this.state = state;\n    this.balance = balance;\n    this.counter = counter;\n  }\n\n}\nexport const useLotteryStateAdvanced = () => {\n  _s();\n\n  var _useContractCalls;\n\n  const {\n    chainId\n  } = useEthers();\n  const {\n    abi\n  } = ArtemLottery;\n  const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero;\n  const artemLotteryInterface = new utils.Interface(abi);\n  let callsArray = [];\n  callsArray.push({\n    abi: artemLotteryInterface,\n    address: artemLotteryAddress,\n    method: \"lottery_state\",\n    args: []\n  });\n  const [results_array] = (_useContractCalls = useContractCalls(callsArray)) !== null && _useContractCalls !== void 0 ? _useContractCalls : [];\n  const lottery_state = results_array ? results_array[0] : -1;\n\n  switch (lottery_state) {\n    case LOTTERY_STATE.OPEN:\n      return \"open\";\n\n    case LOTTERY_STATE.CLOSED:\n      return \"closed\";\n\n    case LOTTERY_STATE.CALCULATING_WINNER:\n      return \"calculating winner\";\n\n    default:\n      return \"not working!\";\n  }\n\n  return lottery_state;\n};\n\n_s(useLotteryStateAdvanced, \"lWARwgmfKB0Zr81Z1IoCAPVscoA=\", false, function () {\n  return [useEthers, useContractCalls];\n});","map":{"version":3,"sources":["/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useLotteryStateAdvanced.ts"],"names":["useEthers","useContractCalls","constants","utils","ArtemLottery","networkMapping","LOTTERY_STATE","LotteryStatus","constructor","state","balance","counter","public","useLotteryStateAdvanced","chainId","abi","artemLotteryAddress","String","AddressZero","artemLotteryInterface","Interface","callsArray","push","address","method","args","results_array","lottery_state","OPEN","CLOSED","CALCULATING_WINNER"],"mappings":";;AAAA,SAASA,SAAT,EAAyCC,gBAAzC,QAA+E,eAA/E;AACA,SAASC,SAAT,EAAoBC,KAApB,QAA4C,QAA5C;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;IAGKC,a;;WAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;GAAAA,a,KAAAA,a;;AAQL,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAAQC,KAAR,EAA8BC,OAA9B,EAAsDC,OAAtD,EAAuEC,MAAvE,EAAgF;AAAA,SAAxEH,KAAwE,GAAxEA,KAAwE;AAAA,SAAlDC,OAAkD,GAAlDA,OAAkD;AAAA,SAA1BC,OAA0B,GAA1BA,OAA0B;AAAE;;AADtE;AAG3B,OAAO,MAAME,uBAAuB,GAAG,MAAc;AAAA;;AAAA;;AACjD,QAAM;AAAEC,IAAAA;AAAF,MAAcd,SAAS,EAA7B;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAUX,YAAhB;AACA,QAAMY,mBAAmB,GAAGF,OAAO,GAAGT,cAAc,CAACY,MAAM,CAACH,OAAD,CAAP,CAAd,CAAgC,cAAhC,EAAgD,CAAhD,CAAH,GAAwDZ,SAAS,CAACgB,WAArG;AACA,QAAMC,qBAAqB,GAAG,IAAIhB,KAAK,CAACiB,SAAV,CAAoBL,GAApB,CAA9B;AAGA,MAAIM,UAAU,GAAG,EAAjB;AACAA,EAAAA,UAAU,CAACC,IAAX,CAAgB;AACZP,IAAAA,GAAG,EAAEI,qBADO;AAEZI,IAAAA,OAAO,EAAEP,mBAFG;AAGZQ,IAAAA,MAAM,EAAE,eAHI;AAIZC,IAAAA,IAAI,EAAE;AAJM,GAAhB;AAUA,QAAM,CAACC,aAAD,yBAAyBzB,gBAAgB,CAACoB,UAAD,CAAzC,iEAAyD,EAA/D;AAEA,QAAMM,aAAa,GAAGD,aAAa,GAAGA,aAAa,CAAC,CAAD,CAAhB,GAAsB,CAAC,CAA1D;;AAGA,UAAQC,aAAR;AACI,SAAKrB,aAAa,CAACsB,IAAnB;AACI,aAAO,MAAP;;AACJ,SAAKtB,aAAa,CAACuB,MAAnB;AACI,aAAO,QAAP;;AACJ,SAAKvB,aAAa,CAACwB,kBAAnB;AACI,aAAO,oBAAP;;AACJ;AACI,aAAO,cAAP;AARR;;AAaA,SAAOH,aAAP;AACH,CArCM;;GAAMd,uB;UACWb,S,EAiBWC,gB","sourcesContent":["import { useEthers, useContractFunction, useContractCalls, ContractCall } from \"@usedapp/core\"\nimport { constants, utils, BigNumber } from \"ethers\"\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { LotteryState } from \"../components/LotteryState\"\n\nenum LOTTERY_STATE {\n    OPEN,\n    CLOSED,\n    CALCULATING_WINNER\n}\n\n\n\nexport class LotteryStatus {\n    constructor(public state: string, public balance: number, public counter: number, public ) {}\n  }\nexport const useLotteryStateAdvanced = (): string => {\n    const { chainId } = useEthers()\n    const { abi } = ArtemLottery\n    const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero\n    const artemLotteryInterface = new utils.Interface(abi)\n\n\n    let callsArray = [] as ContractCall[];\n    callsArray.push({\n        abi: artemLotteryInterface,\n        address: artemLotteryAddress,\n        method: \"lottery_state\",\n        args: [],\n    })\n\n\n\n\n    const [results_array]: any[] = useContractCalls(callsArray) ?? [];\n\n    const lottery_state = results_array ? results_array[0] : -1;\n\n\n    switch (lottery_state) {\n        case LOTTERY_STATE.OPEN:\n            return \"open\";\n        case LOTTERY_STATE.CLOSED:\n            return \"closed\";\n        case LOTTERY_STATE.CALCULATING_WINNER:\n            return \"calculating winner\"\n        default:\n            return \"not working!\"\n    }\n\n\n\n    return lottery_state;\n}"]},"metadata":{},"sourceType":"module"}