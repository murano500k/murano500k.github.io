{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEthers, useContractCall } from \"@usedapp/core\";\nimport { constants, utils } from \"ethers\";\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\";\nimport networkMapping from \"../chain-info/deployments/map.json\";\nvar LOTTERY_STATE;\n\n(function (LOTTERY_STATE) {\n  LOTTERY_STATE[LOTTERY_STATE[\"OPEN\"] = 0] = \"OPEN\";\n  LOTTERY_STATE[LOTTERY_STATE[\"CLOSED\"] = 1] = \"CLOSED\";\n  LOTTERY_STATE[LOTTERY_STATE[\"CALCULATING_WINNER\"] = 2] = \"CALCULATING_WINNER\";\n})(LOTTERY_STATE || (LOTTERY_STATE = {}));\n\nexport const useLotteryStateAdvanced = () => {\n  _s();\n\n  var _useContractCall;\n\n  const {\n    chainId\n  } = useEthers();\n  const {\n    abi\n  } = ArtemLottery;\n  const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero;\n  const artemLotteryInterface = new utils.Interface(abi);\n  let callsArray = [];\n  callsArray.add;\n  const [lottery_state] = (_useContractCall = useContractCall({\n    abi: artemLotteryInterface,\n    address: artemLotteryAddress,\n    method: \"lottery_state\",\n    args: []\n  })) !== null && _useContractCall !== void 0 ? _useContractCall : [];\n\n  switch (lottery_state) {\n    case LOTTERY_STATE.OPEN:\n      return \"open\";\n\n    case LOTTERY_STATE.CLOSED:\n      return \"closed\";\n\n    case LOTTERY_STATE.CALCULATING_WINNER:\n      return \"calculating winner\";\n\n    default:\n      return \"not working!\";\n  }\n\n  return lottery_state;\n};\n\n_s(useLotteryStateAdvanced, \"My0ConC8wq5+sD2i0i5tnHZ+TJ8=\", false, function () {\n  return [useEthers, useContractCall];\n});","map":{"version":3,"sources":["/home/aradchenko/blockchain/smart_contract_token_lottery/front_end/src/hooks/useLotteryStateAdvanced.ts"],"names":["useEthers","useContractCall","constants","utils","ArtemLottery","networkMapping","LOTTERY_STATE","useLotteryStateAdvanced","chainId","abi","artemLotteryAddress","String","AddressZero","artemLotteryInterface","Interface","callsArray","add","lottery_state","address","method","args","OPEN","CLOSED","CALCULATING_WINNER"],"mappings":";;AAAA,SAASA,SAAT,EAAyCC,eAAzC,QAA8E,eAA9E;AACA,SAASC,SAAT,EAAoBC,KAApB,QAA4C,QAA5C;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;IAEKC,a;;WAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;GAAAA,a,KAAAA,a;;AAML,OAAO,MAAMC,uBAAuB,GAAG,MAAc;AAAA;;AAAA;;AACjD,QAAM;AAAEC,IAAAA;AAAF,MAAcR,SAAS,EAA7B;AACA,QAAM;AAAES,IAAAA;AAAF,MAAUL,YAAhB;AACA,QAAMM,mBAAmB,GAAGF,OAAO,GAAGH,cAAc,CAACM,MAAM,CAACH,OAAD,CAAP,CAAd,CAAgC,cAAhC,EAAgD,CAAhD,CAAH,GAAwDN,SAAS,CAACU,WAArG;AACA,QAAMC,qBAAqB,GAAG,IAAIV,KAAK,CAACW,SAAV,CAAoBL,GAApB,CAA9B;AAGA,MAAIM,UAAU,GAAG,EAAjB;AACAA,EAAAA,UAAU,CAACC,GAAX;AAIA,QAAM,CAACC,aAAD,wBAAuBhB,eAAe,CAAC;AACzCQ,IAAAA,GAAG,EAAEI,qBADoC;AAEzCK,IAAAA,OAAO,EAAER,mBAFgC;AAGzCS,IAAAA,MAAM,EAAE,eAHiC;AAIzCC,IAAAA,IAAI,EAAE;AAJmC,GAAD,CAAtC,+DAKA,EALN;;AAQA,UAAQH,aAAR;AACI,SAAKX,aAAa,CAACe,IAAnB;AACI,aAAO,MAAP;;AACJ,SAAKf,aAAa,CAACgB,MAAnB;AACI,aAAO,QAAP;;AACJ,SAAKhB,aAAa,CAACiB,kBAAnB;AACI,aAAO,oBAAP;;AACJ;AACI,aAAO,cAAP;AARR;;AAaA,SAAON,aAAP;AACH,CAlCM;;GAAMV,uB;UACWP,S,EAWSC,e","sourcesContent":["import { useEthers, useContractFunction, useContractCall, ContractCall } from \"@usedapp/core\"\nimport { constants, utils, BigNumber } from \"ethers\"\nimport ArtemLottery from \"../chain-info/contracts/ArtemLottery.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nenum LOTTERY_STATE {\n    OPEN,\n    CLOSED,\n    CALCULATING_WINNER\n}\n\nexport const useLotteryStateAdvanced = (): string => {\n    const { chainId } = useEthers()\n    const { abi } = ArtemLottery\n    const artemLotteryAddress = chainId ? networkMapping[String(chainId)][\"ArtemLottery\"][0] : constants.AddressZero\n    const artemLotteryInterface = new utils.Interface(abi)\n\n\n    let callsArray = [] as ContractCall;\n    callsArray.add\n\n\n\n    const [lottery_state]: any = useContractCall({\n        abi: artemLotteryInterface,\n        address: artemLotteryAddress,\n        method: \"lottery_state\",\n        args: [],\n    }) ?? [];\n\n\n    switch (lottery_state) {\n        case LOTTERY_STATE.OPEN:\n            return \"open\";\n        case LOTTERY_STATE.CLOSED:\n            return \"closed\";\n        case LOTTERY_STATE.CALCULATING_WINNER:\n            return \"calculating winner\"\n        default:\n            return \"not working!\"\n    }\n\n\n\n    return lottery_state;\n}"]},"metadata":{},"sourceType":"module"}